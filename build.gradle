buildscript {
    ext {
        springBootVersion = '2.4.4'
        dependencyManagementVersion = '1.0.11.RELEASE'
        // for QueryDSL
        queryDslVersion = '4.4.0'
        querydslPluginVersion = '1.0.10'
    }
    repositories {
        mavenCentral()

        // for QueryDSL
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}"
        // for QueryDSL
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}"
    }
}

allprojects {
    group 'com.quartz'
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'org.springframework.boot:spring-boot-starter-test'

    }

    bootJar { enabled = false }
    jar { enabled = true }
    test { useJUnitPlatform() }
}

def querydslProjects = [
        project(':core'),
        project(':external-client')
]

configure(querydslProjects) {

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        // for QueryDSL
        implementation "com.querydsl:querydsl-core:${queryDslVersion}"
        implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
        annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jpa"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"

        runtimeOnly 'com.h2database:h2'
        runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
        runtimeOnly 'org.postgresql:postgresql'
    }

    def querydslDir = "src/main/generated"

    sourceSets {
        main.java.srcDirs += [ querydslDir ]
    }

    tasks.withType(JavaCompile) {
        options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
    }

    clean {
        file(querydslDir).deleteDir()
    }

}

project(":core") {
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        runtimeOnly 'com.h2database:h2'
        runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
        runtimeOnly 'org.postgresql:postgresql'
    }

}

project(":scheduler") {
    dependencies {
        compile project(':core')
        implementation 'org.springframework.boot:spring-boot-starter-quartz'
        compileOnly "org.springframework.boot:spring-boot-configuration-processor"
    }

    task deployJar(type: Copy) {
        dependsOn('jar')
        from "$buildDir/libs/job.jar"
        into "/tmp/job-repository/"
    }

}

project(":batch") {
    dependencies {
        compile project(':core')
        implementation 'org.springframework.boot:spring-boot-starter-batch'
        implementation 'org.springframework.boot:spring-boot-starter-quartz'
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    }
}

project(":external-client") {
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        runtimeOnly 'com.h2database:h2'
        runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
        runtimeOnly 'org.postgresql:postgresql'
    }
}

project(":api") {
    dependencies {
        compile project(':scheduler')
        compile project(':external-client')
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
}